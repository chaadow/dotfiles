# Replace C-b with C-s for the prefix key

unbind C-b
set -g prefix C-s
bind-key -r C-s send-prefix

# Useful for switching to escape mode in vim
 set -sg escape-time 0
# Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Seamless aviation using vim-tmux-navigator (github christoomey/vim-tmux-navigator)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Restore clear screen keybind mapped over by tmux-navigator
bind C-l send-keys C-l

# Use 256 color mode + TrueColors, useful for Vim colorshemes
# set-option -g default-terminal "xterm-256color"
set-option -g default-terminal "xterm-256color"
set -ga terminal-overrides ',xterm-256color:Tc'

# Use emacs / readline key-bindings in the tmux command prompt
set-option -g status-keys "emacs"

# Allow the session name in status left to display up to 50 characters
set-option -g status-left-length 50
# tm_session_name="#[bold]$tm_icon #S"
set -g status-right-length 150
# set -g status-left $tm_session_name' '

# set -g status-left '#S #I:#P #[default]'
# set -g status-left '[#S - #(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)] '

# tm_tunes="#[bold]#(spotify)"
# # More useful status-right with battery percentage and nicely formated datetime
# set -g status-right "#(battery -t) #(date '+%a, %b %d - %I:%M')"
# set -g status-right "$tm_tunes #(date '+%a, %b %d - %I:%M')"
set -g status-right "#(date '+%a, %b %d - %I:%M')"

set -g status-interval 5

# More intuitive pane splitting key-bindings, open all in current path
bind-key - split-window -v  -c '#{pane_current_path}'
bind-key '\' split-window -h  -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'

# Easily open dotfiles
bind C-d popup -d "~/.dotfiles/" -xC -yC -w80% -h80% -E "vim +Files"

bind o run-shell "open '#{pane_current_path}'"

# Easy resizing of panes with fine and coarse adjustment
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1
bind -n C-S-Left resize-pane -L 10
bind -n C-S-Right resize-pane -R 10
bind -n C-S-Down resize-pane -D 5
bind -n C-S-Up resize-pane -U 5

# Number windows starting at 1, renumber as windows are added / removed
set-option -g base-index 1
set-option -g renumber-windows on

# Keep window names as I set them
setw -g automatic-rename on

# Quick session switching back and forth. I never use the built in layouts
# (default mapping for Space), so I reclaimed the key for this
bind-key Space switch-client -l

# Enable focus events (For vim to be able to intercept the FocusGained autocmd)
set -g focus-events on

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "pbcopy"
unbind -T copy-mode-vi Space
bind -T copy-mode-vi Space send -X jump-again
bind-key -T copy-mode-vi 0 send -X back-to-indentation

bind y run 'tmux save-buffer - | pbcopy '
bind C-y run 'tmux save-buffer - | pbcopy '

# Sample quick-pane configurations
bind-key h split-window -h "htop"
bind-key t run-shell "tmux-popup 'vim todo.md'"
bind-key w split-window -h "vim +FZF"

# Prompted join-pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# "break session" and "kill session" without exiting tmux
bind-key C-b send-keys 'tat && exit' 'C-m'
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'
bind-key b break-pane -d
bind-key ! run-shell '(tmux switch-client -l || tmux switch-client -n) && tmux kill-session -t "#S" || tmux kill-session'

# Create a new session from fuzzy project list
bind-key C-t run-shell "tmux-popup 'tmux-open-session' 100"
# Fuzzy matching session navigation via fzf utility
bind-key C-j run-shell "tmux-popup 'tmux-switch-session' 100"

# Creates a popup
bind-key p run-shell "tmux-popup"

# Keep plenty of history for scrollback
set -g history-limit 10000

# mouse
set -g mouse on
